<?xml version="1.0"?>
<project name="FrameLog" default="test">
  <!-- The targets you mostly want to use are:
    * compile     Compiles the main library to a DLL in ${target.dir}
    * test        Runs the unit tests (no progress is given, so be patient)
    * run-demo    Runs the demo project
    * nuget-pack  Builds the NuGet package for release
  Note that FrameLog can build against .NET 4.0 and .NET 4.5.1. 'compile', 'run-demo' will use
  the value of ${framework.name} and ${framework.dir}, which defaults to .NET 4.0. 'test' and 
  nuget-pack' run against both. -->

  <property name="nant.settings.currentframework" value="net-4.0" />
  <property name="programfiles.32" value="${environment::get-folder-path('ProgramFilesX86')}" />
  <!-- I believe that on 32-bit OSs from Vista onwards the above line should return "C:\Program Files".
       See https://stackoverflow.com/questions/13936127/what-does-the-programfilesx86-specialfolder-do-on-systems-like-windows-xp -->

  <property name="framework.net40.dir" value="${programfiles.32}\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\" />
  <property name="framework.net45.dir" value="${programfiles.32}\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\" />  
  <property name="framework.name" value="net40" />
  <property name="framework.dir" value="${framework.net40.dir}" />

  <property name="target.dir" value="target" />
  <property name="release.dir" value="release" />
  <property name="package.dir" value="${release.dir}/package" />
  <property name="demo.assembly" value="FrameLog.Example.Demo.exe" />
  <property name="tests.assembly" value="FrameLog.Tests.dll" />
  
  <property name="version.major" value="2" />
  <property name="version.minor" value="0" />
  <!-- Provided automatically by TeamCity -->
  <property name="version.build" value="0" unless="${property::exists('version.build')}" />
  <property name="version.prerelease" value="-beta" />
  
  <property name="db.provider" value="System.Data.SqlClient" />
  <property name="db.connectionString" value="Server=localhost;Database=FrameLog.Example.ExampleContext;Integrated Security=True;" />
  
  <target name="prepare">
    <delete dir="${target.dir}" />
    <mkdir dir="${target.dir}" />
  </target>
  
  <target name="create-filterchain">
    <filterchain id="placeholder">
        <expandproperties />
        <replacetokens>
            <token key="DOLLAR" value="$" />
        </replacetokens>
    </filterchain>  
  </target>
  
  <target name="create-app-config" depends="create-filterchain">    
    <copy file="conf/App.config.template"
          tofile="conf/App.config"
          overwrite="true">
      <filterchain refid="placeholder" />
    </copy>
    <copy file="conf/App.config"
          tofile="FrameLog.Example.Demo/App.config" />
    <copy file="conf/App.config"
          tofile="FrameLog.Tests/App.config" />          
  </target>
  
  <target name="create-assembly-info" depends="create-filterchain">
      <copy file="FrameLog/AssemblyInfo.cs.template"
          tofile="FrameLog/Properties/AssemblyInfo.cs"
          overwrite="true">
      <filterchain refid="placeholder" />
    </copy>
  </target>
  
  <target name="fetch-ef" depends="prepare, copy-source-subset">
    <property name="ef.path" value="${target.dir}/EntityFramework.6.0.0/lib/${framework.name}" />
    <exec program="nuget">
      <arg value="install" />
      <arg value="EntityFramework" />
      <arg value="-Version" />
      <arg value="6.0.0" />
      <arg value="-OutputDirectory" />
      <arg value="${target.dir}" />
    </exec>
    <copy file="${ef.path}/EntityFramework.dll"
          tofile="${target.dir}/EntityFramework.dll" />
    <copy file="${ef.path}/EntityFramework.SqlServer.dll"
          tofile="${target.dir}/EntityFramework.SqlServer.dll" />
  </target>
  <target name="fetch-nunit" depends="prepare, copy-source-subset">
    <exec program="nuget">
      <arg value="install" />
      <arg value="NUnit" />
      <arg value="-Version" />
      <arg value="2.6.2" />
      <arg value="-OutputDirectory" />
      <arg value="${target.dir}" />
    </exec>
    <copy file="${target.dir}/NUnit.2.6.2/lib/nunit.framework.dll"
          tofile="${target.dir}/nunit.framework.dll" />
  </target>  
  <target name="fetch-moq" depends="prepare, copy-source-subset">
    <exec program="nuget">
      <arg value="install" />
      <arg value="Moq" />
      <arg value="-Version" />
      <arg value="4.2.1312.1622" />
      <arg value="-OutputDirectory" />
      <arg value="${target.dir}" />
    </exec>
    <copy file="${target.dir}/Moq.4.2.1312.1622/lib/net40/Moq.dll"
          tofile="${target.dir}/Moq.dll" />      
  </target>

  <!-- This allows us to exclude .NET 4.5.1 source files when compiling against .NET 4.0 -->
  <target name="copy-source-subset" depends="prepare, create-assembly-info">
    <mkdir dir="${target.dir}/src" />
    <copy todir="${target.dir}/src">
      <fileset>
        <include name="FrameLog/**/*.cs" />
        <include name="FrameLog.Example/**/*.cs" />
        <include name="FrameLog.Example.Demo/**/*.cs" />
        <include name="FrameLog.Tests/**/*.cs" />
      </fileset>
    </copy>
    <if test="${framework.name == 'net40'}">
      <delete>
        <fileset basedir="${target.dir}/src">        
          <include name="FrameLog/FrameLogModuleAsync.cs" />
          <include name="FrameLog/Transactions/ITransactionProviderAsync.cs" />
          <include name="FrameLog/Transactions/NullTransactionProviderAsync.cs" />
          <include name="FrameLog/Transactions/TransactionScopeProviderAsync.cs" />
          <include name="FrameLog/Contexts/DbContextAdapterAsync.cs" />
          <include name="FrameLog/Contexts/ObjectContextAdapterAsync.cs" />
          <include name="FrameLog/Contexts/IFrameLogContextAsync.cs" />
          <include name="FrameLog.Example/ExampleContextAsync.cs" />
          <include name="FrameLog.Tests/AsyncTests.cs" />
        </fileset>
      </delete>
    </if>
  </target>
  
  <target name="compile" depends="prepare, fetch-ef, create-assembly-info, copy-source-subset">
      <fail if="${directory::exists(framework.dir) == false}">Can't find reference assemblies from folder ${framework.dir}</fail>
      <csc target="library" debug="true" output="${target.dir}/FrameLog.dll" noconfig="true" nostdlib="true">
      <sources>
        <include name="${target.dir}/src/FrameLog/**/*.cs" />
      </sources>
      <references>
        <!-- We explicitly include everything, and have no implicit includes using
             the noconfig and nostdlib attributes, so that we are definitely using
             the reference assemblies -->
        <include name="${framework.dir}/mscorlib.dll" />
        <include name="${framework.dir}/System.dll" />
        <include name="${framework.dir}/System.Core.dll" />
        <include name="${framework.dir}/System.Data.dll" />
        <include name="${framework.dir}/System.ComponentModel.DataAnnotations.dll" />
        <include name="${framework.dir}/System.Transactions.dll" />
        <include name="${framework.dir}/System.Xml.dll" />
        <include name="${target.dir}/EntityFramework.dll" />
      </references>
    </csc>
  </target>

  <target name="compile-example" depends="prepare, compile, fetch-ef, copy-source-subset">
     <csc target="library" debug="true" output="${target.dir}/FrameLog.Example.dll">
      <sources>
        <include name="${target.dir}/src/FrameLog.Example/**/*.cs" />
      </sources>
      <references>
        <include name="${target.dir}/FrameLog.dll" />        
        <include name="${target.dir}/EntityFramework.dll" />
        <include name="${framework.dir}/System.ComponentModel.DataAnnotations.dll" /> 
	  </references>
    </csc>   
  </target>
  
  <target name="compile-demo" depends="prepare, compile, compile-example, fetch-ef, create-app-config, copy-source-subset">
     <csc target="exe" debug="true" output="${target.dir}/${demo.assembly}">
      <sources>
        <include name="${target.dir}/src/FrameLog.Example.Demo/**/*.cs" />
      </sources>
      <references>
        <include name="${target.dir}/FrameLog.dll" />
        <include name="${target.dir}/FrameLog.Example.dll" />        
        <include name="${target.dir}/EntityFramework.dll" />
	  </references>
    </csc>
    <copy file="FrameLog.Example.Demo/App.Config"
          tofile="${target.dir}/${demo.assembly}.config" />
  </target>
  
  <target name="run-demo" depends="compile-demo">
    <exec program="${target.dir}/${demo.assembly}" />
  </target>
  
  <target name="compile-tests" depends="prepare, compile, compile-example, fetch-nunit, fetch-ef, fetch-moq, create-app-config, copy-source-subset">
     <csc target="library" debug="true" output="${target.dir}/${tests.assembly}">
      <sources>
        <include name="${target.dir}/src/FrameLog.Tests/**/*.cs" />
      </sources>
      <references>
        <include name="${target.dir}/FrameLog.dll" />
        <include name="${target.dir}/FrameLog.Example.dll" />
        
        <include name="${target.dir}/nunit.framework.dll" />
        <include name="${target.dir}/EntityFramework.dll" />
        <include name="${target.dir}/Moq.dll" />
      </references>
    </csc>
    <copy file="FrameLog.Tests/App.Config"
          tofile="${target.dir}/${tests.assembly}.config" />
  </target>
  
  <target name="run-tests" depends="compile-tests">
    <nunit2>
        <formatter type="Xml" usefile="true" extension=".xml" /> 
        <formatter type="Plain" />
        <test assemblyname="${target.dir}/${tests.assembly}" />
    </nunit2>
  </target>  

  <target name="test">
    <property name="framework.name" value="net40" />
    <property name="framework.dir" value="${framework.net40.dir}" />
    <call target="run-tests" cascade="true" />
    <echo>Tests run for .NET 4.0 target</echo>

    <property name="framework.name" value="net45" />
    <property name="framework.dir" value="${framework.net45.dir}" />
    <call target="run-tests" cascade="true" />
    <echo>Tests run for .NET 4.5.1 target</echo>
  </target>
  
  <target name="nuget-nuspec" depends="create-filterchain, get-commit-message">
    <copy file="conf/FrameLog.nuspec.template"
          tofile="${target.dir}/FrameLog.nuspec"
          overwrite="true">
      <filterchain refid="placeholder" />
    </copy>
  </target>
  
  <target name="nuget-assemble" depends="compile">
    <mkdir dir="${package.dir}/lib" />
    <mkdir dir="${package.dir}/lib/${framework.name}" />
    <copy file="${target.dir}/FrameLog.dll"
          tofile="${package.dir}/lib/${framework.name}/FrameLog.dll" />
  </target>

  <target name="nuget-pack" depends="nuget-nuspec">
    <delete dir="${release.dir}" />
    <mkdir dir="${release.dir}" />

    <mkdir dir="${package.dir}" />
    <copy file="${target.dir}/FrameLog.nuspec"
          tofile="${package.dir}/FrameLog.nuspec"
          overwrite="true" />

    <property name="framework.name" value="net40" />
    <property name="framework.dir" value="${framework.net40.dir}" />
    <call target="nuget-assemble" cascade="true" />

    <property name="framework.name" value="net45" />
    <property name="framework.dir" value="${framework.net45.dir}" />
    <call target="nuget-assemble" cascade="true" />

    <exec program="nuget">    
      <arg value="Pack" />
      <arg value="${package.dir}/FrameLog.nuspec" />
      <arg value="-OutputDirectory" />
      <arg value="${release.dir}" />
    </exec>      

    <echo>Built NuGet package with .NET 4.0 and .NET 4.5.1 variants of FrameLog at ${release.dir}/</echo>
  </target>
  
  <target name="get-commit-message">
    <exec program="hg" output="hg-commit-message">
      <arg value="parent" />
      <arg value="--template" />
      <arg value="{desc}" />
    </exec>
    <property name="version.message" value="" />
    <loadfile file="hg-commit-message" property="version.message" />
    <echo>${version.message}</echo>
  </target>
  
  <target name="prebuild-script">
     <exec program="sqlcmd">
       <arg value="-i" />
       <arg value="conf/prebuild.sql" />
     </exec>
  </target>
</project>
